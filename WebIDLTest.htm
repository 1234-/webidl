<!DOCTYPE html>

<html>
<head>
    <title>WebIDL Testing</title>
    <script src="http://darobin.github.com/respec/builds/respec-w3c-common.js" class="remove"></script>
    <script class="remove">
       var respecConfig = {
          // document info
          subtitle: "Testing Summary, Conformance Report and Testable Assertions for WebIDL",
          specStatus: "ED",
          shortName: "webidl-test",
          copyrightStart: "2012",
          //previousPublishDate: "2009-03-15",
          //previousMaturity: "ED",
          //previousDiffURI: "http://dev.w3.org/2009/dap/ReSpec.js/test-spec/ED-respec-test-20100224.html",
          //edDraftURI: "http://dev.w3.org/2009/dap/ReSpec.js/test-spec/",
          edDraftURI: "none",
          // lcEnd: 
          extraCSS: ["http://dev.w3.org/2009/dap/ReSpec.js/css/respec.css"],
          inlineCSS: true,
          // editors
          editors: [
              {
                 name: "Travis Leithead",
                 company: "Microsoft", companyURL: "http://microsoft.com/"
              }],
          // alternateFormats
          //alternateFormats: [
          //    {
          //       uri: 'format1.html',
          //       label: 'Some Format'
          //    },
          //    {
          //       uri: 'format2.html',
          //       label: 'Some Other Format'
          //    },
          //    {
          //       uri: 'format3.html',
          //       label: 'Canonical Format'
          //    }
          //],

          // WG
          wg: "Web Application Working Group",
          wgURI: "http://www.w3.org/2008/webapps/",
          wgPublicList: "public-webapps",
          //wgPatentURI: "http://www.w3.org/2004/01/pp-impl/43696/status",
       };


    </script>
   <style>
      iframe {
         width: 95%;
         height: 600px;
         border: 1px solid orange;
         margin-top: 10px;
         display: block;
      }
      .assertView {
         width: 95%;
         border: 1px solid orange;
         border-top: none;
      }
      #addPanel, #createPanel {
         text-align: center;
      }
      #visible-asserts {
         height: 400px;
      }
      #visible-asserts dl {
         margin-top: 0;
      }

      #matching_asserts > :first-child, #matching_asserts > :nth-child(2) {
         display: none; /* These are the template elements... */
      }
      .assert-ui-title a {
         color: orange;
         text-decoration: underline;
      }
      .assert-ui-title a:hover {
         color: red;
         cursor: pointer;
      }
      .assert-ui-notes {
         width: 95%;
         height: 5em;
         background-color: #ceeaff;
         border: 1px solid blue;
         display: block;
      }
      .assert-ui-id, .assert-ui-author, .assert-ui-date {
         font-size: xx-small;
         font-style: italic;
      }
      .assert-ui-test {
         float: right;
      }
      .approved {
         background-color: #0b7000;
         color: white;
      }
      .submitted {
         background-color: #ffed97;
         color: #5c3600;
      }
      
   </style>
</head>
<body>
   <section id="abstract">
      This document defines the testable assertions in WebIDL [first edition], and cross-links to tests that have been authored. 
      It will also contain the implementation report as tests are approved according to the <a href="http://www.w3.org/2008/webapps/wiki/Testing">WebApps Testing Process</a>.
   </section>
   <section>
      <h2>Testable assertions visualizer</h2>
      <p>This section hosts the WebIDL specification and is used for identifying testable assertions in that spec according to the list of assertions defined in this document.</p>
      <div id="loadIframeHere"><button onclick="injectIframe()">Load the WebIDL spec</button></div>
   </section>
   <section>
      <h2>This section shows the testable assertions that are currently visible in the above iframe</h2>
      <div class="assertView">
         <div id="addPanel">
            <input type="button" value="Create a new testable assertion" id="markNew" style="display:none" />
            <input type="button" value="Export/Download" id="exportNew" style="display: none" />
         </div>
         <div id="createPanel" style="display: none">
            <form id="formNew">
               <label>Spec reference: <input type="text" id="A_specRef" style="width:60em" placeholder="Select an element in the above spec to populate this field" required /></label>
               <br />
               <label>Assert Id: <input type="text" id="A_id" style="width:10em" required /></label>
               <label>Title: <input type="text" id="A_title" style="width:50em" placeholder="Include section number and brief description" required /></label>
               <label>Author: <input type="text" id="A_author" style="width:10em" required /></label>
               <br />
               <textarea id="A_notes" style="width:98%;height:5em" placeholder="Describe the test and any other relevant info here..."></textarea>
               <input type="submit" value="Save" id="saveNew" />
               <input type="button" value="Cancel" id="cancelNew" />
            </form>
            <hr />
         </div>
      </div>
      <div id="visible-asserts" class="assertView">
         <dl id="dynamic_asserts"></dl>
      </div>
   </section>
   <section>
      <h2>All matching assertions</h2>
      All the identified testable assertions in WebIDL are identified in the list below.
      <dl id="matching_asserts">
         <dt class="assert-ui-title"><a></a></dt>
         <dd>
            <textarea class="assert-ui-notes" readonly></textarea>
            <span class="assert-ui-id"></span> |
            <span class="assert-ui-author"></span> |
            <span class="assert-ui-date"></span>
            <button class="assert-ui-test"></button>
         </dd>
      </dl>
   </section>
   <section>
      <h2>Unmatched assertions</h2>
      <p>These assertions no longer match the part of the document they were authored against. This likely happened because the section of the document they were 
         referencing changed. These assertions should be reviewed and have their matching path udpated.</p>
      <dl id="unmatched_asserts">
      </dl>
   </section>
   <script>
      var existingAssertMap = null;
      var newAssertsMap = {};
      var iframeWindow = null;
      var SPEC_TESTING_COMPANION_URL = "spec-testing-companion.js";
      var WEBIDL_ASSERTIONS_URL = "testable_assertions.txt";
      var isSecondOnloadAfterRespec = false;

      addEventListener("message", ie9CompatMessageDecoder);

      // IE9 can't sent complex objects (structured clone algorithm) through postMessage. Works in IE10
      function ie9CompatMessageDecoder(messageString) {
         messageString.data2 = JSON.parse(messageString.data);
         message(messageString);
      }
      function ie9CompatMessageEncoder(messageObject) {
         iframeWindow.postMessage(JSON.stringify(messageObject), "/");
      }

      function prepAsserts() {
         var initPayload = [];
         for (var key in existingAssertMap) {
            initPayload.push({ assertId: key, selector: existingAssertMap[key].specRef });
         }
         return initPayload;
      }

      // Load asserts
      document.addEventListener("DOMContentLoaded", function () {
         // Request the assertions for WebIDL...
         var xhr = new XMLHttpRequest();
         xhr.open("get", WEBIDL_ASSERTIONS_URL);
         xhr.onload = function () {
            if (this.status != 404) {
               existingAssertMap = JSON.parse(this.responseText);
            }
         }
         xhr.send();
      });

      function injectIframe() {
         document.getElementById("loadIframeHere").innerHTML = "<iframe src='v1.html' onload='oniframeload()'></iframe>"
      }

      function oniframeload() {
         // Inject the testing companion into the WebIDL spec
         iframeWindow = document.querySelector("iframe").contentWindow;
         var scriptToInject = iframeWindow.document.createElement("script");
         scriptToInject.src = SPEC_TESTING_COMPANION_URL;
         iframeWindow.document.body.appendChild(scriptToInject);

         // Give the layout engine, etc., a chance to update the visual data before initializing the tool.
         setTimeout(function () {
            ie9CompatMessageEncoder({ message: "init", data: prepAsserts() });
            ie9CompatMessageEncoder({ message: "notify" });
         }, 1000);

         // Show the create button if this UA supports exporting the created assertions...
         if (window.Blob && navigator.msSaveOrOpenBlob)
            document.getElementById("markNew").style.display = "";
      }

      function message(e) {
         var d = e.data2;
         if ((typeof d == "object") && (d != null)) {
            if (d.message == "initialized") {
               //alert("spec testing companion initialized:\n\n" + JSON.stringify(d.data));
               replicateAssertsTo(d.data.matched, "matching_asserts");
               replicateAssertsTo(d.data.unmatched, "unmatched_asserts");
            }
            if (d.message == "assert")
               document.getElementById("A_specRef").value = d.data;
            if (d.message == "asserts-in-view") {
               document.getElementById("dynamic_asserts").innerHTML = ""; // Clear it out...
               replicateAssertsTo(d.data, "dynamic_asserts");
            }
         }
      }

      // Setup new insertion finding...
      document.getElementById("markNew").addEventListener('click', function () {
         // Set the companion in the identify mode...(asnyc)
         if (iframeWindow == null)
            return; // Not ready yet...
         ie9CompatMessageEncoder({ message: "identify" });
         // Hide the new button
         document.getElementById("addPanel").style.display = "none";
         // Show the form
         document.getElementById("createPanel").style.display = "";
         // Clear all the entries in the form...
         document.getElementById("A_id").value = "";
         document.getElementById("A_specRef").value = "";
         document.getElementById("A_title").value = "";
         // NOTE: Leave author alone...(probably the same author)
         document.getElementById("A_notes").value = "";
      });

      document.getElementById("cancelNew").addEventListener('click', function () {
         document.getElementById("createPanel").style.display = "none";
         document.getElementById("addPanel").style.display = "";
      });

      document.getElementById("formNew").addEventListener('submit', function (e) {
         // Verify this id doesn't already exist...
         var keyName = document.getElementById("A_id").value;
         if (typeof existingAssertMap[keyName] != "undefined")
            alert("Note: This assert id is already in use in the existing assert id list; adding it anyway");
         if (typeof newAssertsMap[keyName] != "undefined") {
            alert("This assert id is a duplicate of one you added earlier, please change the id");
            e.preventDefault();
            return;
         }
         newAssertsMap[keyName] = {
            title: document.getElementById("A_title").value,
            specRef: document.getElementById("A_specRef").value,
            notes: document.getElementById("A_notes").value,
            author: document.getElementById("A_author").value,
            date: new Date(),
            testURL: "",
            testApproved: false
         };
         if (Object.keys(newAssertsMap).length == 1) { // First entry...
            document.getElementById("exportNew").style.display = ""; // Make it visible.
         }
         e.preventDefault(); // Don't actually submit and reload the page.
         document.getElementById("createPanel").style.display = "none";
         document.getElementById("addPanel").style.display = "";
      });

      document.getElementById("exportNew").addEventListener('click', function () {
         // Create a Blob with the JSON content in it.
         var exportBlob = new Blob([JSON.stringify(newAssertsMap, null, "  ")], "text/json");
         navigator.msSaveOrOpenBlob(exportBlob, "NewTestableAssertions.json");
      });

      function replicateAssertsTo(assertIdList, targetId) {
         var target = null;
         target = document.getElementById(targetId);
         for (var i = 0, len = assertIdList.length; i < len; i++) {
            if (typeof assertIdList[i] != "string") // Which happens for notify messages...
               assertIdList[i] = assertIdList[i].assertId;
            // Clone the assert template...
            var definitionTerm = document.getElementById("matching_asserts").firstElementChild.cloneNode(true);
            var definitionDesc = document.getElementById("matching_asserts").firstElementChild.nextElementSibling.cloneNode(true);
            // Add the title
            if (targetId == "matching_asserts") {
               definitionTerm.firstElementChild.innerHTML = existingAssertMap[assertIdList[i]].title;
               definitionTerm.firstElementChild.privId = assertIdList[i];
               definitionTerm.firstElementChild.onclick = click_showAssert;
            }
            else
               definitionTerm.innerHTML = existingAssertMap[assertIdList[i]].title; // Blow away the Anchor element.

            definitionDesc.children[0].innerHTML = existingAssertMap[assertIdList[i]].notes; // textarea
            definitionDesc.children[1].innerHTML = assertIdList[i]; // span
            definitionDesc.children[2].innerHTML = existingAssertMap[assertIdList[i]].author; // span
            var d = new Date(existingAssertMap[assertIdList[i]].date);
            definitionDesc.children[3].innerHTML = d.toLocaleDateString(); // span
            if (existingAssertMap[assertIdList[i]].testURL == "") {
               definitionDesc.children[4].innerHTML = "Test case not available";
               definitionDesc.children[4].setAttribute("disabled", "")
            }
            else {
               definitionDesc.children[4].innerHTML = existingAssertMap[assertIdList[i]].testApproved ? "Approved test case >" : "Submitted test case >";
               definitionDesc.children[4].className += existingAssertMap[assertIdList[i]].testApproved ? " approved" : " submitted";
               definitionDesc.children[4].testURL = existingAssertMap[assertIdList[i]].testURL;
               definitionDesc.children[4].onclick = click_goToTest;
            }
            target.appendChild(definitionTerm);
            target.appendChild(definitionDesc);
         }
      }


      function click_showAssert() {
         ie9CompatMessageEncoder({ message: "show", data: this.privId });
      }

      function click_goToTest() {
         open(this.testURL, "_blank");
      }
   </script>
</body>
</html>