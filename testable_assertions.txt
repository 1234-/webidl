{
  "s4_001": {
    "title": "Section 4: Objects should be extensible by default",
    "specRef": "#ecmascript-binding > p:nth-child(6)",
    "notes": "Test three objects, an instance ('document'), an interface object ('XMLHttpRequest'), and an interface prototype object ('Node.prototype') to be sure they are all [Extensible], meaning that Object.isExtensible(x) returns true for each of these objects.",
    "author": "Travis Leithead",
    "date": "2012-10-03T23:14:03.466Z",
    "testURL": "",
    "testApproved": false
  },
  
  "s4_002": {
    "title": "Section 4: Objects should have an internal prototype of Object.prototype unless otherwise noted",
    "specRef": "#ecmascript-binding > p:nth-child(7)",
    "notes": "Interface objects are out-of-scope (their prototypes are Function), platform array objects are out-of-scope (their prototypes are Array), various constants are natively typed (Number, String, Boolean, etc.) and are likewise out-of-scope. Test an interface prototype object ('Element.prototype') using Object.getPrototypeOf(x) and compare to Object.prototype.",
    "author": "Travis Leithead",
    "date": "2012-10-03T23:26:34.320Z",
    "testURL": "",
    "testApproved": false
  },
  
  "s4_003": {
    "title": "Section 4: objects defined to be function objects have an internal prototype of Function.prototype",
    "specRef": "#ecmascript-binding > ul:nth-child(9) > li:nth-child(1)",
    "notes": "document.getElementById is defined to be a function. Ensure that Object.getPrototypeOf(x) equals Function.prototype.",
    "author": "Travis Leithead",
    "date": "2012-10-03T23:31:47.639Z",
    "testURL": "",
    "testApproved": false
  },
  
  "s4_004": {
    "title": "Section 4: objects defined to be function objects have [[Get]] semantics",
    "specRef": "#ecmascript-binding > ul:nth-child(9) > li:nth-child(2)",
    "notes": "In 15.3.5.4\n#1, call [[Get]] internal method on O from 8.12.3 looking for prop P (by...)\n  In 8.12.3 \n  #1 get the descriptor for P on O(by...)\n    In 8.12.2 \n    #1 get prop P by calling [[GetOwnProperty]] on O (by...)\n      In 8.12.1\n      #1 if not own property return undefined\n      #2 make empty propdesc D\n      #3-8 populate the propdesc and return it.\n    #2 if not undefined, return prop\n    #3 get the [[Prototype]] of O\n    #4 if null, return undefined\n    #5 return recursive result on [[Prototype]] of O\n  #2 if not defined, return undefined\n  #3 if it's a data property, return the value\n  #4-5 its an accessor property, if the getter is not defined, return undefined\n  #6 Call the getter on the object\n#2 If P is 'caller' in strict mode then throw TypeError\n#3 return the result\n\nSummary: Does a prototype lookup.\nTest that lookups off of document.getElementById have the following characterisitcs:\n* x.notThere returns undefined\n* x.call returns a function object\n* Object.defineProperty(y) -- a value property -- to the instance (and also on a prototype) and verify that it is returned.\n* Object.defineProperty(y) -- an accessor property -- to the instance (and also on a prototype) and verify that the getter is called.\n* Enable strict mode, then validate that x.caller throws TypeError",
    "author": "Travis Leithead",
    "date": "2012-10-04T00:09:46.757Z",
    "testURL": "",
    "testApproved": false
  }
,

  "travil_test_2": {
    "title": "The Initial publication of WebIDL (at the bottom of the spec)",
    "specRef": "#changes > dl:nth-child(4) > dt:nth-child(19)",
    "notes": "17 October 2007 was the FPWD.\nTime to start testing.",
    "author": "Microsoft",
    "date": "2012-07-11T23:40:41.624Z",
    "testURL": "",
    "testApproved": false
  },
  "travil_test_3": {
    "title": "This assertion should not be found (by design)",
    "specRef": "#does_not_exist > div",
    "notes": "This is for testing purposes only (testing the framework)",
    "author": "Microsoft",
    "date": "2012-07-11T23:40:41.624Z",
    "testURL": "",
    "testApproved": false
  }
}